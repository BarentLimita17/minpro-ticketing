generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  date               DateTime  @db.Date
  startTime          DateTime  @db.Time()
  endTime            DateTime  @db.Time()
  description        String    @db.LongText()
  termsAndConditions String    @db.LongText()
  bannerUrl          String?
  thumbnailUrl       String?
  isPublished        Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  locationId         Int
  categoryId         Int?
  userUid            String?

  eventTicket EventTicket[]
  review      Review[]
  promotion   Promotion[]
  location    Location      @relation(fields: [locationId], references: [id])
  Category    Category?     @relation(fields: [categoryId], references: [id])
  User        User?         @relation(fields: [userUid], references: [uid])
  UserTicket  UserTicket[]
  Transaction Transaction[]
}

model EventTicket {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(45)
  description  String    @db.VarChar(255)
  price        Int       @default(0)
  quantity     Int
  validityDate DateTime? @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  eventId      Int

  event             Event               @relation(fields: [eventId], references: [id])
  UserTicket        UserTicket[]
  TransactionDetail TransactionDetail[]
}

model UserTicket {
  id            String    @id @default(uuid())
  userUid       String
  eventId       Int
  eventTicketId Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  EventTicket EventTicket @relation(fields: [eventTicketId], references: [id])
  User        User        @relation(fields: [userUid], references: [uid])
  Event       Event       @relation(fields: [eventId], references: [id])
}

model Transaction {
  id                     Int       @id @default(autoincrement())
  userUid                String
  totalTransactionAmount Int
  eventId                Int
  promotionId            Int?
  isReviewed             Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  deletedAt              DateTime?

  review            Review?
  promotion         Promotion?          @relation(fields: [promotionId], references: [id])
  User              User                @relation(fields: [userUid], references: [uid])
  Event             Event               @relation(fields: [eventId], references: [id])
  TransactionDetail TransactionDetail[]
}

model TransactionDetail {
  id                Int       @id @default(autoincrement())
  quantity          Int
  price             Int
  totalTicketAmount Int
  transactionId     Int
  eventTicketId     Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  transaction Transaction @relation(fields: [transactionId], references: [id])
  eventTicket EventTicket @relation(fields: [eventTicketId], references: [id])
}

model Promotion {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(45)
  code         String    @db.VarChar(45)
  description  String    @db.VarChar(255)
  discount     Float
  quantity     Int
  validityDate DateTime? @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  eventId      Int

  Event       Event         @relation(fields: [eventId], references: [id])
  Transaction Transaction[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(45)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event[]
}

model Review {
  id            Int       @id @default(autoincrement())
  rating        Int
  feedback      String    @db.VarChar(255)
  suggestion    String    @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  eventId       Int
  userUid       String?
  transactionId Int       @unique

  transaction Transaction @relation(fields: [transactionId], references: [id])
  Event       Event       @relation(fields: [eventId], references: [id])
  User        User?       @relation(fields: [userUid], references: [uid])
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  city      String    @db.VarChar(45)
  details   String    @db.VarChar(255)
  street    String    @db.VarChar(45)
  zipCode   String    @db.VarChar(45)
  latitude  Float     @default(0)
  longitude Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event[]
}

model User {
  uid           String    @id @default(cuid())
  email         String
  fullname      String
  password      String
  pointsBalance Int       @default(0)
  code          String    @unique
  isUseCode     Boolean   @default(false)
  roleId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  event       Event[]
  review      Review[]
  role        Role          @relation(fields: [roleId], references: [id])
  Transaction Transaction[]
  UserTicket  UserTicket[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User[]
}
